# Malicious Crawler Attack Management System

This system is designed to manage and mitigate attacks by malicious crawler robots. It automatically logs 404 errors generated by these crawlers and blocks IP addresses when they attempt to access paths recorded in the blacklist.


Disclaimer: This system is highly experimental and in its alpha version. It may damage your installation, likely contains vulnerabilities, and is intended solely for testing and further development.

This system is currently extremely intrusive and does not sufficiently consider your site's existing configuration. Numerous bugs are highly likely to occur.

The whitelist system has not been created yet, so your site is expected to contain commonly used favicon files, as well as the necessary JSON and other files for PWA conversions. Without them, 404 errors will be generated when your site is accessed by iPhones, iPads, Microsoft tablets, and Android devices.



## Overview

The system performs the following functions:
- **Logging**: Records 404 errors and access attempts (currently only the index page).
- **Blacklist Management**: Maintains a list of URLs/paths. When a request matches a blacklist entry, the source IP is automatically blocked.
- **IP Management**: Allows administrators to ban or unban IP addresses.
- **IP Abuse Verification**: Checks one or more IP addresses via an API (requires an API key) against the ipabuse list.
- **WordPress Compatibility**: Includes a module to handle sites running on WordPress.
- **False Positive Mitigation**: During installation, the system scans for blacklist entries in the website directory and offers to remove them to prevent false positives.

## Contents of the Archive

- **installation-beta2.php**: Main installation script.
- **debut.php** and **debut404wpclassictheme.php**: Entry points for installation, with the latter tailored for WordPress sites.
- **gestion.php** (or **gestion-template.php**): Admin interface for managing the blacklist, IP bans, and IP abuse checks.
- **ifwordpress.php**: Checks if the site is running WordPress and applies specific verifications.
- **blacklist.txt**: Contains the list of paths to block.
- **blacklistverif.php**: Verifies blacklist entries and helps clean up unwanted entries before installation.
- **404.php**: Custom error page for 404 errors.
- **sample_index**: Example index file.
- Other supporting files may be present.

*Note: The `__MACOSX` directory contains system files generated by macOS and can be ignored.*

## Installation

1. **Upload Files**  
   Upload all files from the archive to your web server, preferably in the desired web root or subdirectory.

2. **Pre-requisites**  
   - A web server running PHP (ensure your PHP version is compatible with the scripts).
   - Sufficient write permissions on the server (for example, the installation script must be able to create or modify the `pipou.ini` file).

3. **User Authentication Setup**  
   At the very beginning of the installation process, the system will prompt you for a login and password. These credentials will be used to secure the administration interface via a `.htpasswd` file placed in the root directory of your website. Make sure to remember these credentials as they are required to access the management interface later.

4. **Run the Installer**  
   - You MUST customize the password in the installation-beta3.php file in line 5
   - Open `installation-beta3.php` in your web browser, type YOUR password,
   - Follow the on-screen instructions:
     - The installer first prompts for login credentials (used for securing the admin interface).
     - It verifies that all required files are present.
     - It backs up and secures the `.htaccess` file.
     - If your site is a WordPress installation, the WordPress module (`ifwordpress.php`) will be activated.
     - The installer scans for any existing blacklist paths in your web directory and offers to remove them to reduce false positives.
     - Finally, the system installs the management module and, if needed, guides you through setting up the IP abuse API key.

5. **API Key Configuration**  
   If you plan to use the IP abuse verification feature, the installer will prompt you to sign up at AbuseIPDB (free and without commitment) and enter your API key. The key is saved in a `pipou.ini` file as follows:

---> pipou.ini
This file is created automatically by the installation script if it does not exist, to store your API key.

## Using the System

- **Logging & Blacklist**  
The system logs 404 errors and access attempts. When a visitor triggers a 404 error by accessing a blacklisted path, the system automatically blocks the corresponding IP address.

- **Administration Interface**  
The admin interface (accessible via `gestion.php` or a similar file) allows you to:
- Update the blacklist.
- Ban or unban IP addresses.
- Verify IP addresses against the ipabuse list using the provided API (requires your AbuseIPDB API key).

- **Maintenance**  
Regularly update your blacklist and monitor the logs to ensure that legitimate users are not being accidentally blocked. The installation process includes a step to remove any blacklist entries found in your web directory to reduce false positives.

## Troubleshooting & Support

- **File Permissions**  
Ensure that the server has proper permissions to write files such as `pipou.ini` and update the `.htaccess` file.
- **API Key Issues**  
If IP verification fails, check that your API key is correct and that your AbuseIPDB account is active.
- **WordPress Sites**  
If you encounter issues on WordPress sites, verify that the WordPress-specific module (`ifwordpress.php`) has been properly activated during the installation.

For further details, consult the inline comments within the PHP files or contact the developer dev@toscan.net for additional support.
